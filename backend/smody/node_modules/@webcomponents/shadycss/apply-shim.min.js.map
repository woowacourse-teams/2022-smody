{"version":3,"sources":["src/style-settings.js","src/css-parse.js","src/common-regex.js","src/unscoped-style-handler.js","src/style-util.js","src/apply-shim.js","src/common-utils.js","src/template-map.js","src/apply-shim-utils.js","entrypoints/apply-shim.js"],"names":["nativeShadow","window","nativeCssVariables_","calcCssVariables","settings","navigator","userAgent","match","CSS","supports","cssBuild","ShadyCSS","undefined","disableRuntime","nativeCss","nativeCssVariables","constructor","StyleNode","parse","text","replace","RX$$module$src$css_parse.comments","RX$$module$src$css_parse.port","root","length","n","i","l","OPEN_BRACE","p","previous","push","CLOSE_BRACE","parseCss","node","t","substring","trim","ss","_expandUnicodeEscapes","RX$$module$src$css_parse.multipleSpaces","lastIndexOf","s","indexOf","AT_START","MEDIA_START","types$$module$src$css_parse.MEDIA_RULE","RX$$module$src$css_parse.keyframesRule","types$$module$src$css_parse.KEYFRAMES_RULE","split","pop","VAR_START","types$$module$src$css_parse.MIXIN_RULE","types$$module$src$css_parse.STYLE_RULE","r$","r","code","repeat","stringify","preserveProperties","cssText","rules","RX$$module$src$css_parse.customProp","RX$$module$src$css_parse.mixinProp","RX$$module$src$css_parse.mixinApply","RX$$module$src$css_parse.varApply","STYLE_RULE","KEYFRAMES_RULE","MEDIA_RULE","MIXIN_RULE","comments","port","customProp","mixinProp","mixinApply","varApply","keyframesRule","multipleSpaces","VAR_ASSIGN","MIXIN_MATCH","MEDIA_MATCH","styleTextSet","Set","toCssText","rulesForStyle","style","textContent","forEachRule","styleRuleCallback","keyframesRuleCallback","onlyActiveRules","skipRules","type","matchMedia","matches","processVariableAndFallback","str","callback","start","level","inner","end","prefix","suffix","comma","value","fallback","getCssBuild","element","__cssBuild","attrValue","getAttribute","CSS_BUILD_ATTR","buildComment","localName","content","firstChild","Comment","commentParts","parentNode","removeChild","APPLY_NAME_CLEAN","INITIAL_INHERIT","IMPORTANT","MixinMap","_map","set","name","props","properties","dependants","get","invalidCallback","ApplyShim","_measureElement","_currentElement","detectMixin","has","test","lastIndex","transformTemplate","template","elementName","_gatheredStyle","styleTextParts","styles","querySelectorAll","hasAttribute","scopingAttribute","add","newStyle","document","createElement","setAttribute","head","appendChild","join","styleText","insertBefore","transformStyle","ast","transformRules","transformCustomStyle","rule","transformRule","transformCssText","matchText","propertyName","valueProperty","valueMixin","_produceCssProperties","_consumeCssProperties","_fallbacksFromPreviousRules","startRule","topRule","fallbacks","seenStartRule","Object","assign","_cssTextToMap","m","exec","mixinName","idx","index","textBeforeApply","slice","textAfterApply","defaults","_atApplyToCssProperties","vars","mixinEntry","f","parts","MIXIN_VAR_SEP","replacement","replaceInitialOrInherit","property","out","sp","_replaceInitialOrInherit","all","getComputedStyle","getPropertyValue","_invalidateMixinEntry","mixinAsProperties","combinedProps","mixinValues","oldProps","create","needToInvalidate","v","prototype","defineProperty","cb","templateMap","promise","Promise","resolve","invalidate","CURRENT_VERSION","VALIDATING_VERSION","NEXT_VERSION","templateIsValid","startValidatingTemplate","_validating","then","applyShim","ApplyShimInterface","customStyleInterface","ensure","CustomStyleInterface","requestAnimationFrame","flushCustomStyles","prepareTemplate","cs","styleSubtree","removeProperty","setProperty","shadowRoot","styleElement","shadowChildren","children","childNodes","is","querySelector","styleDocument","body","ScopingShim","applyShimInterface","prepareTemplateStyles","elementExtends","prepareTemplateDom","getComputedStyleValue"],"mappings":"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","file":"apply-shim.min.js","sourcesContent":["/**\n@license\nCopyright (c) 2017 The Polymer Project Authors. All rights reserved.\nThis code may only be used under the BSD style license found at http://polymer.github.io/LICENSE.txt\nThe complete set of authors may be found at http://polymer.github.io/AUTHORS.txt\nThe complete set of contributors may be found at http://polymer.github.io/CONTRIBUTORS.txt\nCode distributed by Google as part of the polymer project is also\nsubject to an additional IP rights grant found at http://polymer.github.io/PATENTS.txt\n*/\n\n'use strict';\n\nexport const nativeShadow = !(\n  window['ShadyDOM'] && window['ShadyDOM']['inUse']\n);\nlet nativeCssVariables_;\n\n/**\n * @param {(ShadyCSSOptions | ShadyCSSInterface)=} settings\n */\nfunction calcCssVariables(settings) {\n  if (settings && settings['shimcssproperties']) {\n    nativeCssVariables_ = false;\n  } else {\n    // chrome 49 has semi-working css vars, check if box-shadow works\n    // safari 9.1 has a recalc bug: https://bugs.webkit.org/show_bug.cgi?id=155782\n    // However, shim css custom properties are only supported with ShadyDOM enabled,\n    // so fall back on native if we do not detect ShadyDOM\n    // Edge 15: custom properties used in ::before and ::after will also be used in the parent element\n    // https://developer.microsoft.com/en-us/microsoft-edge/platform/issues/12414257/\n    nativeCssVariables_ =\n      nativeShadow ||\n      Boolean(\n        !navigator.userAgent.match(/AppleWebKit\\/601|Edge\\/15/) &&\n          window.CSS &&\n          CSS.supports &&\n          CSS.supports('box-shadow', '0 0 0 var(--foo)')\n      );\n  }\n}\n\n/** @type {string | undefined} */\nexport let cssBuild;\nif (window.ShadyCSS && window.ShadyCSS.cssBuild !== undefined) {\n  cssBuild = window.ShadyCSS.cssBuild;\n}\n\n/** @type {boolean} */\nexport const disableRuntime = Boolean(\n  window.ShadyCSS && window.ShadyCSS.disableRuntime\n);\n\nif (window.ShadyCSS && window.ShadyCSS.nativeCss !== undefined) {\n  nativeCssVariables_ = window.ShadyCSS.nativeCss;\n} else if (window.ShadyCSS) {\n  calcCssVariables(window.ShadyCSS);\n  // reset window variable to let ShadyCSS API take its place\n  window.ShadyCSS = undefined;\n} else {\n  calcCssVariables(window['WebComponents'] && window['WebComponents']['flags']);\n}\n\n// Hack for type error under new type inference which doesn't like that\n// nativeCssVariables is updated in a function and assigns the type\n// `function(): ?` instead of `boolean`.\nexport const nativeCssVariables = /** @type {boolean} */ (nativeCssVariables_);\n","/**\n@license\nCopyright (c) 2017 The Polymer Project Authors. All rights reserved.\nThis code may only be used under the BSD style license found at http://polymer.github.io/LICENSE.txt\nThe complete set of authors may be found at http://polymer.github.io/AUTHORS.txt\nThe complete set of contributors may be found at http://polymer.github.io/CONTRIBUTORS.txt\nCode distributed by Google as part of the polymer project is also\nsubject to an additional IP rights grant found at http://polymer.github.io/PATENTS.txt\n*/\n\n/*\nExtremely simple css parser. Intended to be not more than what we need\nand definitely not necessarily correct =).\n*/\n\n'use strict';\n\n/** @unrestricted */\nclass StyleNode {\n  constructor() {\n    /** @type {number} */\n    this['start'] = 0;\n    /** @type {number} */\n    this['end'] = 0;\n    /** @type {StyleNode} */\n    this['previous'] = null;\n    /** @type {StyleNode} */\n    this['parent'] = null;\n    /** @type {Array<StyleNode>} */\n    this['rules'] = null;\n    /** @type {string} */\n    this['parsedCssText'] = '';\n    /** @type {string} */\n    this['cssText'] = '';\n    /** @type {boolean} */\n    this['atRule'] = false;\n    /** @type {number} */\n    this['type'] = 0;\n    /** @type {string} */\n    this['keyframesName'] = '';\n    /** @type {string} */\n    this['selector'] = '';\n    /** @type {string} */\n    this['parsedSelector'] = '';\n  }\n}\n\nexport {StyleNode};\n\n// given a string of css, return a simple rule tree\n/**\n * @param {string} text\n * @return {StyleNode}\n */\nexport function parse(text) {\n  text = clean(text);\n  return parseCss(lex(text), text);\n}\n\n// remove stuff we don't care about that may hinder parsing\n/**\n * @param {string} cssText\n * @return {string}\n */\nfunction clean(cssText) {\n  return cssText.replace(RX.comments, '').replace(RX.port, '');\n}\n\n// super simple {...} lexer that returns a node tree\n/**\n * @param {string} text\n * @return {!StyleNode}\n */\nfunction lex(text) {\n  let root = new StyleNode();\n  root['start'] = 0;\n  root['end'] = text.length;\n  let n = root;\n  for (let i = 0, l = text.length; i < l; i++) {\n    if (text[i] === OPEN_BRACE) {\n      if (!n['rules']) {\n        n['rules'] = [];\n      }\n      let p = n;\n      let previous = p['rules'][p['rules'].length - 1] || null;\n      n = new StyleNode();\n      n['start'] = i + 1;\n      n['parent'] = p;\n      n['previous'] = previous;\n      p['rules'].push(n);\n    } else if (text[i] === CLOSE_BRACE) {\n      n['end'] = i + 1;\n      n = n['parent'] || root;\n    }\n  }\n  return root;\n}\n\n// add selectors/cssText to node tree\n/**\n * @param {StyleNode} node\n * @param {string} text\n * @return {!StyleNode}\n */\nfunction parseCss(node, text) {\n  let t = text.substring(node['start'], node['end'] - 1);\n  node['parsedCssText'] = node['cssText'] = t.trim();\n  if (node['parent']) {\n    let ss = node['previous']\n      ? node['previous']['end']\n      : node['parent']['start'];\n    t = text.substring(ss, node['start'] - 1);\n    t = _expandUnicodeEscapes(t);\n    t = t.replace(RX.multipleSpaces, ' ');\n    // TODO(sorvell): ad hoc; make selector include only after last ;\n    // helps with mixin syntax\n    t = t.substring(t.lastIndexOf(';') + 1);\n    let s = (node['parsedSelector'] = node['selector'] = t.trim());\n    node['atRule'] = s.indexOf(AT_START) === 0;\n    // note, support a subset of rule types...\n    if (node['atRule']) {\n      if (s.indexOf(MEDIA_START) === 0) {\n        node['type'] = types.MEDIA_RULE;\n      } else if (s.match(RX.keyframesRule)) {\n        node['type'] = types.KEYFRAMES_RULE;\n        node['keyframesName'] = node['selector'].split(RX.multipleSpaces).pop();\n      }\n    } else {\n      if (s.indexOf(VAR_START) === 0) {\n        node['type'] = types.MIXIN_RULE;\n      } else {\n        node['type'] = types.STYLE_RULE;\n      }\n    }\n  }\n  let r$ = node['rules'];\n  if (r$) {\n    for (let i = 0, l = r$.length, r; i < l && (r = r$[i]); i++) {\n      parseCss(r, text);\n    }\n  }\n  return node;\n}\n\n/**\n * conversion of sort unicode escapes with spaces like `\\33 ` (and longer) into\n * expanded form that doesn't require trailing space `\\000033`\n * @param {string} s\n * @return {string}\n */\nfunction _expandUnicodeEscapes(s) {\n  return s.replace(/\\\\([0-9a-f]{1,6})\\s/gi, function () {\n    let code = arguments[1],\n      repeat = 6 - code.length;\n    while (repeat--) {\n      code = '0' + code;\n    }\n    return '\\\\' + code;\n  });\n}\n\n/**\n * stringify parsed css.\n * @param {StyleNode} node\n * @param {boolean=} preserveProperties\n * @param {string=} text\n * @return {string}\n */\nexport function stringify(node, preserveProperties, text = '') {\n  // calc rule cssText\n  let cssText = '';\n  if (node['cssText'] || node['rules']) {\n    let r$ = node['rules'];\n    if (r$ && !_hasMixinRules(r$)) {\n      for (let i = 0, l = r$.length, r; i < l && (r = r$[i]); i++) {\n        cssText = stringify(r, preserveProperties, cssText);\n      }\n    } else {\n      cssText = preserveProperties\n        ? node['cssText']\n        : removeCustomProps(node['cssText']);\n      cssText = cssText.trim();\n      if (cssText) {\n        cssText = '  ' + cssText + '\\n';\n      }\n    }\n  }\n  // emit rule if there is cssText\n  if (cssText) {\n    if (node['selector']) {\n      text += node['selector'] + ' ' + OPEN_BRACE + '\\n';\n    }\n    text += cssText;\n    if (node['selector']) {\n      text += CLOSE_BRACE + '\\n\\n';\n    }\n  }\n  return text;\n}\n\n/**\n * @param {Array<StyleNode>} rules\n * @return {boolean}\n */\nfunction _hasMixinRules(rules) {\n  let r = rules[0];\n  return (\n    Boolean(r) &&\n    Boolean(r['selector']) &&\n    r['selector'].indexOf(VAR_START) === 0\n  );\n}\n\n/**\n * @param {string} cssText\n * @return {string}\n */\nfunction removeCustomProps(cssText) {\n  cssText = removeCustomPropAssignment(cssText);\n  return removeCustomPropApply(cssText);\n}\n\n/**\n * @param {string} cssText\n * @return {string}\n */\nexport function removeCustomPropAssignment(cssText) {\n  return cssText.replace(RX.customProp, '').replace(RX.mixinProp, '');\n}\n\n/**\n * @param {string} cssText\n * @return {string}\n */\nfunction removeCustomPropApply(cssText) {\n  return cssText.replace(RX.mixinApply, '').replace(RX.varApply, '');\n}\n\n/** @enum {number} */\nexport const types = {\n  STYLE_RULE: 1,\n  KEYFRAMES_RULE: 7,\n  MEDIA_RULE: 4,\n  MIXIN_RULE: 1000,\n};\n\nconst OPEN_BRACE = '{';\nconst CLOSE_BRACE = '}';\n\n// helper regexp's\nconst RX = {\n  comments: /\\/\\*[^*]*\\*+([^/*][^*]*\\*+)*\\//gim,\n  port: /@import[^;]*;/gim,\n  customProp: /(?:^[^;\\-\\s}]+)?--[^;{}]*?:[^{};]*?(?:[;\\n]|$)/gim,\n  mixinProp: /(?:^[^;\\-\\s}]+)?--[^;{}]*?:[^{};]*?{[^}]*?}(?:[;\\n]|$)?/gim,\n  mixinApply: /@apply\\s*\\(?[^);]*\\)?\\s*(?:[;\\n]|$)?/gim,\n  varApply: /[^;:]*?:[^;]*?var\\([^;]*\\)(?:[;\\n]|$)?/gim,\n  keyframesRule: /^@[^\\s]*keyframes/,\n  multipleSpaces: /\\s+/g,\n};\n\nconst VAR_START = '--';\nconst MEDIA_START = '@media';\nconst AT_START = '@';\n","/**\n@license\nCopyright (c) 2017 The Polymer Project Authors. All rights reserved.\nThis code may only be used under the BSD style license found at http://polymer.github.io/LICENSE.txt\nThe complete set of authors may be found at http://polymer.github.io/AUTHORS.txt\nThe complete set of contributors may be found at http://polymer.github.io/CONTRIBUTORS.txt\nCode distributed by Google as part of the polymer project is also\nsubject to an additional IP rights grant found at http://polymer.github.io/PATENTS.txt\n*/\n\nexport const VAR_ASSIGN = /(?:^|[;\\s{]\\s*)(--[\\w-]*?)\\s*:\\s*(?:((?:'(?:\\\\'|.)*?'|\"(?:\\\\\"|.)*?\"|\\([^)]*?\\)|[^};{])+)|\\{([^}]*)\\}(?:(?=[;\\s}])|$))/gi;\nexport const MIXIN_MATCH = /(?:^|\\W+)@apply\\s*\\(?([^);\\n]*)\\)?/gi;\nexport const VAR_CONSUMED = /(--[\\w-]+)\\s*([:,;)]|$)/gi;\nexport const ANIMATION_MATCH = /(animation\\s*:)|(animation-name\\s*:)/;\nexport const MEDIA_MATCH = /@media\\s(.*)/;\nexport const IS_VAR = /^--/;\nexport const BRACKETED = /\\{[^}]*\\}/g;\nexport const HOST_PREFIX = '(?:^|[^.#[:])';\nexport const HOST_SUFFIX = '($|[.:[\\\\s>+~])';\n","/**\n@license\nCopyright (c) 2017 The Polymer Project Authors. All rights reserved.\nThis code may only be used under the BSD style license found at http://polymer.github.io/LICENSE.txt\nThe complete set of authors may be found at http://polymer.github.io/AUTHORS.txt\nThe complete set of contributors may be found at http://polymer.github.io/CONTRIBUTORS.txt\nCode distributed by Google as part of the polymer project is also\nsubject to an additional IP rights grant found at http://polymer.github.io/PATENTS.txt\n*/\n\n'use strict';\n\n/** @type {!Set<string>} */\nconst styleTextSet = new Set();\n\nexport const scopingAttribute = 'shady-unscoped';\n\n/**\n * Add a specifically-marked style to the document directly, and only one copy of that style.\n *\n * @param {!HTMLStyleElement} style\n * @return {undefined}\n */\nexport function processUnscopedStyle(style) {\n  const text = style.textContent;\n  if (!styleTextSet.has(text)) {\n    styleTextSet.add(text);\n    const newStyle = document.createElement('style');\n    newStyle.setAttribute('shady-unscoped', '');\n    newStyle.textContent = text;\n    document.head.appendChild(newStyle);\n  }\n}\n\n/**\n * Check if a style is supposed to be unscoped\n * @param {!HTMLStyleElement} style\n * @return {boolean} true if the style has the unscoping attribute\n */\nexport function isUnscopedStyle(style) {\n  return style.hasAttribute(scopingAttribute);\n}\n","/**\n@license\nCopyright (c) 2017 The Polymer Project Authors. All rights reserved.\nThis code may only be used under the BSD style license found at http://polymer.github.io/LICENSE.txt\nThe complete set of authors may be found at http://polymer.github.io/AUTHORS.txt\nThe complete set of contributors may be found at http://polymer.github.io/CONTRIBUTORS.txt\nCode distributed by Google as part of the polymer project is also\nsubject to an additional IP rights grant found at http://polymer.github.io/PATENTS.txt\n*/\n\n'use strict';\n\nimport {nativeShadow, nativeCssVariables, cssBuild} from './style-settings.js';\nimport {parse, stringify, types, StyleNode} from './css-parse.js'; // eslint-disable-line @typescript-eslint/no-unused-vars\nimport {MEDIA_MATCH} from './common-regex.js';\n// prettier-ignore\nimport {processUnscopedStyle, isUnscopedStyle} from './unscoped-style-handler.js';\n\n/**\n * @param {string|StyleNode} rules\n * @param {function(StyleNode)=} callback\n * @return {string}\n */\nexport function toCssText(rules, callback) {\n  if (!rules) {\n    return '';\n  }\n  if (typeof rules === 'string') {\n    rules = parse(rules);\n  }\n  if (callback) {\n    forEachRule(rules, callback);\n  }\n  return stringify(rules, nativeCssVariables);\n}\n\n/**\n * @param {HTMLStyleElement} style\n * @return {StyleNode}\n */\nexport function rulesForStyle(style) {\n  if (!style['__cssRules'] && style.textContent) {\n    style['__cssRules'] = parse(style.textContent);\n  }\n  return style['__cssRules'] || null;\n}\n\n// Tests if a rule is a keyframes selector, which looks almost exactly\n// like a normal selector but is not (it has nothing to do with scoping\n// for example).\n/**\n * @param {StyleNode} rule\n * @return {boolean}\n */\nexport function isKeyframesSelector(rule) {\n  return (\n    Boolean(rule['parent']) && rule['parent']['type'] === types.KEYFRAMES_RULE\n  );\n}\n\n/**\n * @param {StyleNode} node\n * @param {Function=} styleRuleCallback\n * @param {Function=} keyframesRuleCallback\n * @param {boolean=} onlyActiveRules\n */\nexport function forEachRule(\n  node,\n  styleRuleCallback,\n  keyframesRuleCallback,\n  onlyActiveRules\n) {\n  if (!node) {\n    return;\n  }\n  let skipRules = false;\n  let type = node['type'];\n  if (onlyActiveRules) {\n    if (type === types.MEDIA_RULE) {\n      let matchMedia = node['selector'].match(MEDIA_MATCH);\n      if (matchMedia) {\n        // if rule is a non matching @media rule, skip subrules\n        if (!window.matchMedia(matchMedia[1]).matches) {\n          skipRules = true;\n        }\n      }\n    }\n  }\n  if (type === types.STYLE_RULE) {\n    styleRuleCallback(node);\n  } else if (keyframesRuleCallback && type === types.KEYFRAMES_RULE) {\n    keyframesRuleCallback(node);\n  } else if (type === types.MIXIN_RULE) {\n    skipRules = true;\n  }\n  let r$ = node['rules'];\n  if (r$ && !skipRules) {\n    for (let i = 0, l = r$.length, r; i < l && (r = r$[i]); i++) {\n      forEachRule(r, styleRuleCallback, keyframesRuleCallback, onlyActiveRules);\n    }\n  }\n}\n\n// add a string of cssText to the document.\n/**\n * @param {string} cssText\n * @param {string} moniker\n * @param {Node} target\n * @param {Node} contextNode\n * @return {HTMLStyleElement}\n */\nexport function applyCss(cssText, moniker, target, contextNode) {\n  let style = createScopeStyle(cssText, moniker);\n  applyStyle(style, target, contextNode);\n  return style;\n}\n\n/**\n * @param {string} cssText\n * @param {string} moniker\n * @return {!HTMLStyleElement}\n */\nexport function createScopeStyle(cssText, moniker) {\n  let style = /** @type {HTMLStyleElement} */ (document.createElement('style'));\n  if (moniker) {\n    style.setAttribute('scope', moniker);\n  }\n  style.textContent = cssText;\n  return style;\n}\n\n/**\n * Track the position of the last added style for placing placeholders\n * @type {Node}\n */\nlet lastHeadApplyNode = null;\n\n// insert a comment node as a styling position placeholder.\n/**\n * @param {string} moniker\n * @return {!Comment}\n */\nexport function applyStylePlaceHolder(moniker) {\n  let placeHolder = document.createComment(\n    ' Shady DOM styles for ' + moniker + ' '\n  );\n  let after = lastHeadApplyNode ? lastHeadApplyNode['nextSibling'] : null;\n  let scope = document.head;\n  scope.insertBefore(placeHolder, after || scope.firstChild);\n  lastHeadApplyNode = placeHolder;\n  return placeHolder;\n}\n\n/**\n * @param {HTMLStyleElement} style\n * @param {?Node} target\n * @param {?Node} contextNode\n */\nexport function applyStyle(style, target, contextNode) {\n  target = target || document.head;\n  let after = (contextNode && contextNode.nextSibling) || target.firstChild;\n  target.insertBefore(style, after);\n  if (!lastHeadApplyNode) {\n    lastHeadApplyNode = style;\n  } else {\n    // only update lastHeadApplyNode if the new style is inserted after the old lastHeadApplyNode\n    let position = style.compareDocumentPosition(lastHeadApplyNode);\n    if (position === Node.DOCUMENT_POSITION_PRECEDING) {\n      lastHeadApplyNode = style;\n    }\n  }\n}\n\n/**\n * @param {string} buildType\n * @return {boolean}\n */\nexport function isTargetedBuild(buildType) {\n  return nativeShadow ? buildType === 'shadow' : buildType === 'shady';\n}\n\n/**\n * Walk from text[start] matching parens and\n * returns position of the outer end paren\n * @param {string} text\n * @param {number} start\n * @return {number}\n */\nexport function findMatchingParen(text, start) {\n  let level = 0;\n  for (let i = start, l = text.length; i < l; i++) {\n    if (text[i] === '(') {\n      level++;\n    } else if (text[i] === ')') {\n      if (--level === 0) {\n        return i;\n      }\n    }\n  }\n  return -1;\n}\n\n/**\n * @param {string} str\n * @param {function(string, string, string, string)} callback\n */\nexport function processVariableAndFallback(str, callback) {\n  // find 'var('\n  let start = str.indexOf('var(');\n  if (start === -1) {\n    // no var?, everything is prefix\n    return callback(str, '', '', '');\n  }\n  //${prefix}var(${inner})${suffix}\n  let end = findMatchingParen(str, start + 3);\n  let inner = str.substring(start + 4, end);\n  let prefix = str.substring(0, start);\n  // suffix may have other variables\n  let suffix = processVariableAndFallback(str.substring(end + 1), callback);\n  let comma = inner.indexOf(',');\n  // value and fallback args should be trimmed to match in property lookup\n  if (comma === -1) {\n    // variable, no fallback\n    return callback(prefix, inner.trim(), '', suffix);\n  }\n  // var(${value},${fallback})\n  let value = inner.substring(0, comma).trim();\n  let fallback = inner.substring(comma + 1).trim();\n  return callback(prefix, value, fallback, suffix);\n}\n\n/**\n * @param {Element} element\n * @param {string} value\n */\nexport function setElementClassRaw(element, value) {\n  // use native setAttribute provided by ShadyDOM when setAttribute is patched\n  if (nativeShadow) {\n    element.setAttribute('class', value);\n  } else {\n    window['ShadyDOM']['nativeMethods']['setAttribute'].call(\n      element,\n      'class',\n      value\n    );\n  }\n}\n\n/**\n * @type {function(*):*}\n */\nexport const wrap =\n  (window['ShadyDOM'] && window['ShadyDOM']['wrap']) || ((node) => node);\n\n/**\n * @param {Element | {is: string, extends: string}} element\n * @return {{is: string, typeExtension: string}}\n */\nexport function getIsExtends(element) {\n  let localName = element['localName'];\n  let is = '',\n    typeExtension = '';\n  /*\n  NOTE: technically, this can be wrong for certain svg elements\n  with `-` in the name like `<font-face>`\n  */\n  if (localName) {\n    if (localName.indexOf('-') > -1) {\n      is = localName;\n    } else {\n      typeExtension = localName;\n      is = (element.getAttribute && element.getAttribute('is')) || '';\n    }\n  } else {\n    is = /** @type {?} */ (element).is;\n    typeExtension = /** @type {?} */ (element).extends;\n  }\n  return {is, typeExtension};\n}\n\n/**\n * @param {Element|DocumentFragment} element\n * @return {string}\n */\nexport function gatherStyleText(element) {\n  /** @type {!Array<string>} */\n  const styleTextParts = [];\n  const styles = /** @type {!NodeList<!HTMLStyleElement>} */ (element.querySelectorAll(\n    'style'\n  ));\n  for (let i = 0; i < styles.length; i++) {\n    const style = styles[i];\n    if (isUnscopedStyle(style)) {\n      if (!nativeShadow) {\n        processUnscopedStyle(style);\n        style.parentNode.removeChild(style);\n      }\n    } else {\n      styleTextParts.push(style.textContent);\n      style.parentNode.removeChild(style);\n    }\n  }\n  return styleTextParts.join('').trim();\n}\n\n/**\n * Split a selector separated by commas into an array in a smart way\n * @param {string} selector\n * @return {!Array<string>}\n */\nexport function splitSelectorList(selector) {\n  const parts = [];\n  let part = '';\n  for (let i = 0; i >= 0 && i < selector.length; i++) {\n    // A selector with parentheses will be one complete part\n    if (selector[i] === '(') {\n      // find the matching paren\n      const end = findMatchingParen(selector, i);\n      // push the paren block into the part\n      part += selector.slice(i, end + 1);\n      // move the index to after the paren block\n      i = end;\n    } else if (selector[i] === ',') {\n      parts.push(part);\n      part = '';\n    } else {\n      part += selector[i];\n    }\n  }\n  // catch any pieces after the last comma\n  if (part) {\n    parts.push(part);\n  }\n  return parts;\n}\n\nconst CSS_BUILD_ATTR = 'css-build';\n\n/**\n * Return the polymer-css-build \"build type\" applied to this element\n *\n * @param {!HTMLElement} element\n * @return {string} Can be \"\", \"shady\", or \"shadow\"\n */\nexport function getCssBuild(element) {\n  if (cssBuild !== undefined) {\n    return /** @type {string} */ (cssBuild);\n  }\n  if (element.__cssBuild === undefined) {\n    // try attribute first, as it is the common case\n    const attrValue = element.getAttribute(CSS_BUILD_ATTR);\n    if (attrValue) {\n      element.__cssBuild = attrValue;\n    } else {\n      const buildComment = getBuildComment(element);\n      if (buildComment !== '') {\n        // remove build comment so it is not needlessly copied into every element instance\n        removeBuildComment(element);\n      }\n      element.__cssBuild = buildComment;\n    }\n  }\n  return element.__cssBuild || '';\n}\n\n/**\n * Check if the given element, either a <template> or <style>, has been processed\n * by polymer-css-build.\n *\n * If so, then we can make a number of optimizations:\n * - polymer-css-build will decompose mixins into individual CSS Custom Properties,\n * so the ApplyShim can be skipped entirely.\n * - Under native ShadowDOM, the style text can just be copied into each instance\n * without modification\n * - If the build is \"shady\" and ShadyDOM is in use, the styling does not need\n * scoping beyond the shimming of CSS Custom Properties\n *\n * @param {!HTMLElement} element\n * @return {boolean}\n */\nexport function elementHasBuiltCss(element) {\n  return getCssBuild(element) !== '';\n}\n\n/**\n * For templates made with tagged template literals, polymer-css-build will\n * insert a comment of the form `<!--css-build:shadow-->`\n *\n * @param {!HTMLElement} element\n * @return {string}\n */\nexport function getBuildComment(element) {\n  const buildComment =\n    element.localName === 'template'\n      ? /** @type {!HTMLTemplateElement} */ (element).content.firstChild\n      : element.firstChild;\n  if (buildComment instanceof Comment) {\n    const commentParts = buildComment.textContent.trim().split(':');\n    if (commentParts[0] === CSS_BUILD_ATTR) {\n      return commentParts[1];\n    }\n  }\n  return '';\n}\n\n/**\n * Check if the css build status is optimal, and do no unneeded work.\n *\n * @param {string=} cssBuild CSS build status\n * @return {boolean} css build is optimal or not\n */\nexport function isOptimalCssBuild(cssBuild = '') {\n  // CSS custom property shim always requires work\n  if (cssBuild === '' || !nativeCssVariables) {\n    return false;\n  }\n  return nativeShadow ? cssBuild === 'shadow' : cssBuild === 'shady';\n}\n\n/**\n * @param {!HTMLElement} element\n */\nfunction removeBuildComment(element) {\n  const buildComment =\n    element.localName === 'template'\n      ? /** @type {!HTMLTemplateElement} */ (element).content.firstChild\n      : element.firstChild;\n  buildComment.parentNode.removeChild(buildComment);\n}\n","/**\n@license\nCopyright (c) 2017 The Polymer Project Authors. All rights reserved.\nThis code may only be used under the BSD style license found at http://polymer.github.io/LICENSE.txt\nThe complete set of authors may be found at http://polymer.github.io/AUTHORS.txt\nThe complete set of contributors may be found at http://polymer.github.io/CONTRIBUTORS.txt\nCode distributed by Google as part of the polymer project is also\nsubject to an additional IP rights grant found at http://polymer.github.io/PATENTS.txt\n*/\n/*\n * The apply shim simulates the behavior of `@apply` proposed at\n * https://tabatkins.github.io/specs/css-apply-rule/.\n * The approach is to convert a property like this:\n *\n *    --foo: {color: red; background: blue;}\n *\n * to this:\n *\n *    --foo_-_color: red;\n *    --foo_-_background: blue;\n *\n * Then where `@apply --foo` is used, that is converted to:\n *\n *    color: var(--foo_-_color);\n *    background: var(--foo_-_background);\n *\n * This approach generally works but there are some issues and limitations.\n * Consider, for example, that somewhere *between* where `--foo` is set and used,\n * another element sets it to:\n *\n *    --foo: { border: 2px solid red; }\n *\n * We must now ensure that the color and background from the previous setting\n * do not apply. This is accomplished by changing the property set to this:\n *\n *    --foo_-_border: 2px solid red;\n *    --foo_-_color: initial;\n *    --foo_-_background: initial;\n *\n * This works but introduces one new issue.\n * Consider this setup at the point where the `@apply` is used:\n *\n *    background: orange;\n *    `@apply` --foo;\n *\n * In this case the background will be unset (initial) rather than the desired\n * `orange`. We address this by altering the property set to use a fallback\n * value like this:\n *\n *    color: var(--foo_-_color);\n *    background: var(--foo_-_background, orange);\n *    border: var(--foo_-_border);\n *\n * Note that the default is retained in the property set and the `background` is\n * the desired `orange`. This leads us to a limitation.\n *\n * Limitation 1:\n\n * Only properties in the rule where the `@apply`\n * is used are considered as default values.\n * If another rule matches the element and sets `background` with\n * less specificity than the rule in which `@apply` appears,\n * the `background` will not be set.\n *\n * Limitation 2:\n *\n * When using Polymer's `updateStyles` api, new properties may not be set for\n * `@apply` properties.\n\n*/\n\n'use strict';\n\n// prettier-ignore\nimport {forEachRule, processVariableAndFallback, rulesForStyle, toCssText, gatherStyleText} from './style-util.js';\nimport {MIXIN_MATCH, VAR_ASSIGN} from './common-regex.js';\nimport {detectMixin} from './common-utils.js';\nimport {StyleNode} from './css-parse.js'; // eslint-disable-line @typescript-eslint/no-unused-vars\n\nconst APPLY_NAME_CLEAN = /;\\s*/m;\nconst INITIAL_INHERIT = /^\\s*(initial)|(inherit)\\s*$/;\nconst IMPORTANT = /\\s*!important/;\n\n// separator used between mixin-name and mixin-property-name when producing properties\n// NOTE: plain '-' may cause collisions in user styles\nconst MIXIN_VAR_SEP = '_-_';\n\n/**\n * @typedef {!Object<string, string>}\n */\nlet PropertyEntry; // eslint-disable-line @typescript-eslint/no-unused-vars\n\n/**\n * @typedef {!Object<string, boolean>}\n */\nlet DependantsEntry; // eslint-disable-line @typescript-eslint/no-unused-vars\n\n/** @typedef {{\n *    properties: PropertyEntry,\n *    dependants: DependantsEntry\n * }}\n */\nlet MixinMapEntry; // eslint-disable-line @typescript-eslint/no-unused-vars\n\n// map of mixin to property names\n// --foo: {border: 2px} -> {properties: {(--foo, ['border'])}, dependants: {'element-name': proto}}\nclass MixinMap {\n  constructor() {\n    /** @type {!Object<string, !MixinMapEntry>} */\n    this._map = {};\n  }\n  /**\n   * @param {string} name\n   * @param {!PropertyEntry} props\n   */\n  set(name, props) {\n    name = name.trim();\n    this._map[name] = {\n      properties: props,\n      dependants: {},\n    };\n  }\n  /**\n   * @param {string} name\n   * @return {MixinMapEntry}\n   */\n  get(name) {\n    name = name.trim();\n    return this._map[name] || null;\n  }\n}\n\n/**\n * Callback for when an element is marked invalid\n * @type {?function(string)}\n */\nlet invalidCallback = null;\n\n/** @unrestricted */\nclass ApplyShim {\n  constructor() {\n    /** @type {?string} */\n    this._currentElement = null;\n    /** @type {HTMLMetaElement} */\n    this._measureElement = null;\n    this._map = new MixinMap();\n  }\n  /**\n   * return true if `cssText` contains a mixin definition or consumption\n   * @param {string} cssText\n   * @return {boolean}\n   */\n  detectMixin(cssText) {\n    return detectMixin(cssText);\n  }\n\n  /**\n   * Gather styles into one style for easier processing\n   * @param {!HTMLTemplateElement} template\n   * @return {HTMLStyleElement}\n   */\n  gatherStyles(template) {\n    const styleText = gatherStyleText(template.content);\n    if (styleText) {\n      const style = /** @type {!HTMLStyleElement} */ (document.createElement(\n        'style'\n      ));\n      style.textContent = styleText;\n      template.content.insertBefore(style, template.content.firstChild);\n      return style;\n    }\n    return null;\n  }\n  /**\n   * @param {!HTMLTemplateElement} template\n   * @param {string} elementName\n   * @return {StyleNode}\n   */\n  transformTemplate(template, elementName) {\n    if (template._gatheredStyle === undefined) {\n      template._gatheredStyle = this.gatherStyles(template);\n    }\n    /** @type {HTMLStyleElement} */\n    const style = template._gatheredStyle;\n    return style ? this.transformStyle(style, elementName) : null;\n  }\n  /**\n   * @param {!HTMLStyleElement} style\n   * @param {string} elementName\n   * @return {StyleNode}\n   */\n  transformStyle(style, elementName = '') {\n    let ast = rulesForStyle(style);\n    this.transformRules(ast, elementName);\n    style.textContent = toCssText(ast);\n    return ast;\n  }\n  /**\n   * @param {!HTMLStyleElement} style\n   * @return {StyleNode}\n   */\n  transformCustomStyle(style) {\n    let ast = rulesForStyle(style);\n    forEachRule(ast, (rule) => {\n      if (rule['selector'] === ':root') {\n        rule['selector'] = 'html';\n      }\n      this.transformRule(rule);\n    });\n    style.textContent = toCssText(ast);\n    return ast;\n  }\n  /**\n   * @param {StyleNode} rules\n   * @param {string} elementName\n   */\n  transformRules(rules, elementName) {\n    this._currentElement = elementName;\n    forEachRule(rules, (r) => {\n      this.transformRule(r);\n    });\n    this._currentElement = null;\n  }\n  /**\n   * @param {!StyleNode} rule\n   */\n  transformRule(rule) {\n    rule['cssText'] = this.transformCssText(rule['parsedCssText'], rule);\n    // :root was only used for variable assignment in property shim,\n    // but generates invalid selectors with real properties.\n    // replace with `:host > *`, which serves the same effect\n    if (rule['selector'] === ':root') {\n      rule['selector'] = ':host > *';\n    }\n  }\n  /**\n   * @param {string} cssText\n   * @param {!StyleNode} rule\n   * @return {string}\n   */\n  transformCssText(cssText, rule) {\n    // produce variables\n    cssText = cssText.replace(\n      VAR_ASSIGN,\n      (matchText, propertyName, valueProperty, valueMixin) =>\n        this._produceCssProperties(\n          matchText,\n          propertyName,\n          valueProperty,\n          valueMixin,\n          rule\n        )\n    );\n    // consume mixins\n    return this._consumeCssProperties(cssText, rule);\n  }\n  /**\n   * @param {string} property\n   * @return {string}\n   */\n  _getInitialValueForProperty(property) {\n    if (!this._measureElement) {\n      this._measureElement = /** @type {HTMLMetaElement} */ (document.createElement(\n        'meta'\n      ));\n      this._measureElement.setAttribute('apply-shim-measure', '');\n      this._measureElement.style.all = 'initial';\n      document.head.appendChild(this._measureElement);\n    }\n    return window\n      .getComputedStyle(this._measureElement)\n      .getPropertyValue(property);\n  }\n  /**\n   * Walk over all rules before this rule to find fallbacks for mixins\n   *\n   * @param {!StyleNode} startRule\n   * @return {!Object}\n   */\n  _fallbacksFromPreviousRules(startRule) {\n    // find the \"top\" rule\n    let topRule = startRule;\n    while (topRule['parent']) {\n      topRule = topRule['parent'];\n    }\n    const fallbacks = {};\n    let seenStartRule = false;\n    forEachRule(topRule, (r) => {\n      // stop when we hit the input rule\n      seenStartRule = seenStartRule || r === startRule;\n      if (seenStartRule) {\n        return;\n      }\n      // NOTE: Only matching selectors are \"safe\" for this fallback processing\n      // It would be prohibitive to run `matchesSelector()` on each selector,\n      // so we cheat and only check if the same selector string is used, which\n      // guarantees things like specificity matching\n      if (r['selector'] === startRule['selector']) {\n        Object.assign(fallbacks, this._cssTextToMap(r['parsedCssText']));\n      }\n    });\n    return fallbacks;\n  }\n  /**\n   * replace mixin consumption with variable consumption\n   * @param {string} text\n   * @param {!StyleNode=} rule\n   * @return {string}\n   */\n  _consumeCssProperties(text, rule) {\n    /** @type {Array} */\n    let m = null;\n    // loop over text until all mixins with defintions have been applied\n    while ((m = MIXIN_MATCH.exec(text))) {\n      let matchText = m[0];\n      let mixinName = m[1];\n      let idx = m.index;\n      // collect properties before apply to be \"defaults\" if mixin might override them\n      // match includes a \"prefix\", so find the start and end positions of @apply\n      let applyPos = idx + matchText.indexOf('@apply');\n      let afterApplyPos = idx + matchText.length;\n      // find props defined before this @apply\n      let textBeforeApply = text.slice(0, applyPos);\n      let textAfterApply = text.slice(afterApplyPos);\n      let defaults = rule ? this._fallbacksFromPreviousRules(rule) : {};\n      Object.assign(defaults, this._cssTextToMap(textBeforeApply));\n      let replacement = this._atApplyToCssProperties(mixinName, defaults);\n      // use regex match position to replace mixin, keep linear processing time\n      text = `${textBeforeApply}${replacement}${textAfterApply}`;\n      // move regex search to _after_ replacement\n      MIXIN_MATCH.lastIndex = idx + replacement.length;\n    }\n    return text;\n  }\n  /**\n   * produce variable consumption at the site of mixin consumption\n   * `@apply` --foo; -> for all props (${propname}: var(--foo_-_${propname}, ${fallback[propname]}}))\n   * Example:\n   *  border: var(--foo_-_border); padding: var(--foo_-_padding, 2px)\n   *\n   * @param {string} mixinName\n   * @param {Object} fallbacks\n   * @return {string}\n   */\n  _atApplyToCssProperties(mixinName, fallbacks) {\n    mixinName = mixinName.replace(APPLY_NAME_CLEAN, '');\n    let vars = [];\n    let mixinEntry = this._map.get(mixinName);\n    // if we depend on a mixin before it is created\n    // make a sentinel entry in the map to add this element as a dependency for when it is defined.\n    if (!mixinEntry) {\n      this._map.set(mixinName, {});\n      mixinEntry = this._map.get(mixinName);\n    }\n    if (mixinEntry) {\n      if (this._currentElement) {\n        mixinEntry.dependants[this._currentElement] = true;\n      }\n      let p, parts, f;\n      const properties = mixinEntry.properties;\n      for (p in properties) {\n        f = fallbacks && fallbacks[p];\n        parts = [p, ': var(', mixinName, MIXIN_VAR_SEP, p];\n        if (f) {\n          parts.push(',', f.replace(IMPORTANT, ''));\n        }\n        parts.push(')');\n        if (IMPORTANT.test(properties[p])) {\n          parts.push(' !important');\n        }\n        vars.push(parts.join(''));\n      }\n    }\n    return vars.join('; ');\n  }\n\n  /**\n   * @param {string} property\n   * @param {string} value\n   * @return {string}\n   */\n  _replaceInitialOrInherit(property, value) {\n    let match = INITIAL_INHERIT.exec(value);\n    if (match) {\n      if (match[1]) {\n        // initial\n        // replace `initial` with the concrete initial value for this property\n        value = this._getInitialValueForProperty(property);\n      } else {\n        // inherit\n        // with this purposfully illegal value, the variable will be invalid at\n        // compute time (https://www.w3.org/TR/css-variables/#invalid-at-computed-value-time)\n        // and for inheriting values, will behave similarly\n        // we cannot support the same behavior for non inheriting values like 'border'\n        value = 'apply-shim-inherit';\n      }\n    }\n    return value;\n  }\n\n  /**\n   * \"parse\" a mixin definition into a map of properties and values\n   * cssTextToMap('border: 2px solid black') -> ('border', '2px solid black')\n   * @param {string} text\n   * @param {boolean=} replaceInitialOrInherit\n   * @return {!Object<string, string>}\n   */\n  _cssTextToMap(text, replaceInitialOrInherit = false) {\n    let props = text.split(';');\n    let property, value;\n    let out = {};\n    for (let i = 0, p, sp; i < props.length; i++) {\n      p = props[i];\n      if (p) {\n        sp = p.split(':');\n        // ignore lines that aren't definitions like @media\n        if (sp.length > 1) {\n          property = sp[0].trim();\n          // some properties may have ':' in the value, like data urls\n          value = sp.slice(1).join(':');\n          if (replaceInitialOrInherit) {\n            value = this._replaceInitialOrInherit(property, value);\n          }\n          out[property] = value;\n        }\n      }\n    }\n    return out;\n  }\n\n  /**\n   * @param {MixinMapEntry} mixinEntry\n   */\n  _invalidateMixinEntry(mixinEntry) {\n    if (!invalidCallback) {\n      return;\n    }\n    for (let elementName in mixinEntry.dependants) {\n      if (elementName !== this._currentElement) {\n        invalidCallback(elementName);\n      }\n    }\n  }\n\n  /**\n   * @param {string} matchText\n   * @param {string} propertyName\n   * @param {?string} valueProperty\n   * @param {?string} valueMixin\n   * @param {!StyleNode} rule\n   * @return {string}\n   */\n  _produceCssProperties(\n    matchText,\n    propertyName,\n    valueProperty,\n    valueMixin,\n    rule\n  ) {\n    // handle case where property value is a mixin\n    if (valueProperty) {\n      // form: --mixin2: var(--mixin1), where --mixin1 is in the map\n      processVariableAndFallback(valueProperty, (prefix, value) => {\n        if (value && this._map.get(value)) {\n          valueMixin = `@apply ${value};`;\n        }\n      });\n    }\n    if (!valueMixin) {\n      return matchText;\n    }\n    let mixinAsProperties = this._consumeCssProperties('' + valueMixin, rule);\n    let prefix = matchText.slice(0, matchText.indexOf('--'));\n    // `initial` and `inherit` as properties in a map should be replaced because\n    // these keywords are eagerly evaluated when the mixin becomes CSS Custom Properties,\n    // and would set the variable value, rather than carry the keyword to the `var()` usage.\n    let mixinValues = this._cssTextToMap(mixinAsProperties, true);\n    let combinedProps = mixinValues;\n    let mixinEntry = this._map.get(propertyName);\n    let oldProps = mixinEntry && mixinEntry.properties;\n    if (oldProps) {\n      // NOTE: since we use mixin, the map of properties is updated here\n      // and this is what we want.\n      combinedProps = Object.assign(Object.create(oldProps), mixinValues);\n    } else {\n      this._map.set(propertyName, combinedProps);\n    }\n    let out = [];\n    let p, v;\n    // set variables defined by current mixin\n    let needToInvalidate = false;\n    for (p in combinedProps) {\n      v = mixinValues[p];\n      // if property not defined by current mixin, set initial\n      if (v === undefined) {\n        v = 'initial';\n      }\n      if (oldProps && !(p in oldProps)) {\n        needToInvalidate = true;\n      }\n      out.push(`${propertyName}${MIXIN_VAR_SEP}${p}: ${v}`);\n    }\n    if (needToInvalidate) {\n      this._invalidateMixinEntry(mixinEntry);\n    }\n    if (mixinEntry) {\n      mixinEntry.properties = combinedProps;\n    }\n    // because the mixinMap is global, the mixin might conflict with\n    // a different scope's simple variable definition:\n    // Example:\n    // some style somewhere:\n    // --mixin1:{ ... }\n    // --mixin2: var(--mixin1);\n    // some other element:\n    // --mixin1: 10px solid red;\n    // --foo: var(--mixin1);\n    // In this case, we leave the original variable definition in place.\n    if (valueProperty) {\n      prefix = `${matchText};${prefix}`;\n    }\n    return `${prefix}${out.join('; ')};`;\n  }\n}\n\n/* exports */\n/* eslint-disable no-self-assign */\nApplyShim.prototype['detectMixin'] = ApplyShim.prototype.detectMixin;\nApplyShim.prototype['transformStyle'] = ApplyShim.prototype.transformStyle;\nApplyShim.prototype['transformCustomStyle'] =\n  ApplyShim.prototype.transformCustomStyle;\nApplyShim.prototype['transformRules'] = ApplyShim.prototype.transformRules;\nApplyShim.prototype['transformRule'] = ApplyShim.prototype.transformRule;\nApplyShim.prototype['transformTemplate'] =\n  ApplyShim.prototype.transformTemplate;\nApplyShim.prototype['_separator'] = MIXIN_VAR_SEP;\n/* eslint-enable no-self-assign */\nObject.defineProperty(ApplyShim.prototype, 'invalidCallback', {\n  /** @return {?function(string)} */\n  get() {\n    return invalidCallback;\n  },\n  /** @param {?function(string)} cb */\n  set(cb) {\n    invalidCallback = cb;\n  },\n});\n\nexport default ApplyShim;\n","/**\n@license\nCopyright (c) 2017 The Polymer Project Authors. All rights reserved.\nThis code may only be used under the BSD style license found at http://polymer.github.io/LICENSE.txt\nThe complete set of authors may be found at http://polymer.github.io/AUTHORS.txt\nThe complete set of contributors may be found at http://polymer.github.io/CONTRIBUTORS.txt\nCode distributed by Google as part of the polymer project is also\nsubject to an additional IP rights grant found at http://polymer.github.io/PATENTS.txt\n*/\n\n'use strict';\n\nimport {MIXIN_MATCH, VAR_ASSIGN} from './common-regex.js';\n\n/**\n * @param {Element} element\n * @param {Object=} properties\n */\nexport function updateNativeProperties(element, properties) {\n  // remove previous properties\n  for (let p in properties) {\n    // NOTE: for bc with shim, don't apply null values.\n    if (p === null) {\n      element.style.removeProperty(p);\n    } else {\n      element.style.setProperty(p, properties[p]);\n    }\n  }\n}\n\n/**\n * @param {Element} element\n * @param {string} property\n * @return {string}\n */\nexport function getComputedStyleValue(element, property) {\n  /**\n   * @const {string}\n   */\n  const value = window.getComputedStyle(element).getPropertyValue(property);\n  if (!value) {\n    return '';\n  } else {\n    return value.trim();\n  }\n}\n\n/**\n * return true if `cssText` contains a mixin definition or consumption\n * @param {string} cssText\n * @return {boolean}\n */\nexport function detectMixin(cssText) {\n  const has = MIXIN_MATCH.test(cssText) || VAR_ASSIGN.test(cssText);\n  // reset state of the regexes\n  MIXIN_MATCH.lastIndex = 0;\n  VAR_ASSIGN.lastIndex = 0;\n  return has;\n}\n","/**\n@license\nCopyright (c) 2017 The Polymer Project Authors. All rights reserved.\nThis code may only be used under the BSD style license found at http://polymer.github.io/LICENSE.txt\nThe complete set of authors may be found at http://polymer.github.io/AUTHORS.txt\nThe complete set of contributors may be found at http://polymer.github.io/CONTRIBUTORS.txt\nCode distributed by Google as part of the polymer project is also\nsubject to an additional IP rights grant found at http://polymer.github.io/PATENTS.txt\n*/\n\n'use strict';\n\n/**\n * @const {!Object<string, !HTMLTemplateElement>}\n */\nconst templateMap = {};\nexport default templateMap;\n","/**\n@license\nCopyright (c) 2017 The Polymer Project Authors. All rights reserved.\nThis code may only be used under the BSD style license found at http://polymer.github.io/LICENSE.txt\nThe complete set of authors may be found at http://polymer.github.io/AUTHORS.txt\nThe complete set of contributors may be found at http://polymer.github.io/CONTRIBUTORS.txt\nCode distributed by Google as part of the polymer project is also\nsubject to an additional IP rights grant found at http://polymer.github.io/PATENTS.txt\n*/\n\n'use strict';\nimport templateMap from './template-map.js';\nimport {StyleNode} from './css-parse.js'; // eslint-disable-line @typescript-eslint/no-unused-vars\n\n/*\n * Utilities for handling invalidating apply-shim mixins for a given template.\n *\n * The invalidation strategy involves keeping track of the \"current\" version of a template's mixins, and updating that count when a mixin is invalidated.\n * The template\n */\n\n/** @const {string} */\nconst CURRENT_VERSION = '_applyShimCurrentVersion';\n\n/** @const {string} */\nconst NEXT_VERSION = '_applyShimNextVersion';\n\n/** @const {string} */\nconst VALIDATING_VERSION = '_applyShimValidatingVersion';\n\n/**\n * @const {Promise<void>}\n */\nconst promise = Promise.resolve();\n\n/**\n * @param {string} elementName\n */\nexport function invalidate(elementName) {\n  let template = templateMap[elementName];\n  if (template) {\n    invalidateTemplate(template);\n  }\n}\n\n/**\n * This function can be called multiple times to mark a template invalid\n * and signal that the style inside must be regenerated.\n *\n * Use `startValidatingTemplate` to begin an asynchronous validation cycle.\n * During that cycle, call `templateIsValidating` to see if the template must\n * be revalidated\n * @param {HTMLTemplateElement} template\n */\nexport function invalidateTemplate(template) {\n  // default the current version to 0\n  template[CURRENT_VERSION] = template[CURRENT_VERSION] || 0;\n  // ensure the \"validating for\" flag exists\n  template[VALIDATING_VERSION] = template[VALIDATING_VERSION] || 0;\n  // increment the next version\n  template[NEXT_VERSION] = (template[NEXT_VERSION] || 0) + 1;\n}\n\n/**\n * @param {string} elementName\n * @return {boolean}\n */\nexport function isValid(elementName) {\n  let template = templateMap[elementName];\n  if (template) {\n    return templateIsValid(template);\n  }\n  return true;\n}\n\n/**\n * @param {HTMLTemplateElement} template\n * @return {boolean}\n */\nexport function templateIsValid(template) {\n  return template[CURRENT_VERSION] === template[NEXT_VERSION];\n}\n\n/**\n * @param {string} elementName\n * @return {boolean}\n */\nexport function isValidating(elementName) {\n  let template = templateMap[elementName];\n  if (template) {\n    return templateIsValidating(template);\n  }\n  return false;\n}\n\n/**\n * Returns true if the template is currently invalid and `startValidating` has been called since the last invalidation.\n * If false, the template must be validated.\n * @param {HTMLTemplateElement} template\n * @return {boolean}\n */\nexport function templateIsValidating(template) {\n  return (\n    !templateIsValid(template) &&\n    template[VALIDATING_VERSION] === template[NEXT_VERSION]\n  );\n}\n\n/**\n * the template is marked as `validating` for one microtask so that all instances\n * found in the tree crawl of `applyStyle` will update themselves,\n * but the template will only be updated once.\n * @param {string} elementName\n */\nexport function startValidating(elementName) {\n  let template = templateMap[elementName];\n  startValidatingTemplate(template);\n}\n\n/**\n * Begin an asynchronous invalidation cycle.\n * This should be called after every validation of a template\n *\n * After one microtask, the template will be marked as valid until the next call to `invalidateTemplate`\n * @param {HTMLTemplateElement} template\n */\nexport function startValidatingTemplate(template) {\n  // remember that the current \"next version\" is the reason for this validation cycle\n  template[VALIDATING_VERSION] = template[NEXT_VERSION];\n  // however, there only needs to be one async task to clear the counters\n  if (!template._validating) {\n    template._validating = true;\n    promise.then(function () {\n      // sync the current version to let future invalidations cause a refresh cycle\n      template[CURRENT_VERSION] = template[NEXT_VERSION];\n      template._validating = false;\n    });\n  }\n}\n\n/**\n * @return {boolean}\n */\nexport function elementsAreInvalid() {\n  for (let elementName in templateMap) {\n    let template = templateMap[elementName];\n    if (!templateIsValid(template)) {\n      return true;\n    }\n  }\n  return false;\n}\n","/**\n@license\nCopyright (c) 2017 The Polymer Project Authors. All rights reserved.\nThis code may only be used under the BSD style license found at http://polymer.github.io/LICENSE.txt\nThe complete set of authors may be found at http://polymer.github.io/AUTHORS.txt\nThe complete set of contributors may be found at http://polymer.github.io/CONTRIBUTORS.txt\nCode distributed by Google as part of the polymer project is also\nsubject to an additional IP rights grant found at http://polymer.github.io/PATENTS.txt\n*/\n\n'use strict';\n\nimport ApplyShim from '../src/apply-shim.js';\nimport templateMap from '../src/template-map.js';\n// prettier-ignore\nimport {getIsExtends, toCssText, elementHasBuiltCss} from '../src/style-util.js';\nimport * as ApplyShimUtils from '../src/apply-shim-utils.js';\n// prettier-ignore\nimport {getComputedStyleValue, updateNativeProperties} from '../src/common-utils.js';\nimport {CustomStyleInterfaceInterface} from '../src/custom-style-interface.js'; // eslint-disable-line @typescript-eslint/no-unused-vars\n// prettier-ignore\nimport {nativeCssVariables, nativeShadow, cssBuild, disableRuntime} from '../src/style-settings.js';\n\n/** @const {ApplyShim} */\nconst applyShim = new ApplyShim();\n\nclass ApplyShimInterface {\n  constructor() {\n    /** @type {?CustomStyleInterfaceInterface} */\n    this.customStyleInterface = null;\n    applyShim['invalidCallback'] = ApplyShimUtils.invalidate;\n  }\n  ensure() {\n    if (this.customStyleInterface) {\n      return;\n    }\n    if (window.ShadyCSS.CustomStyleInterface) {\n      this.customStyleInterface = /** @type {!CustomStyleInterfaceInterface} */ (window\n        .ShadyCSS.CustomStyleInterface);\n      this.customStyleInterface['transformCallback'] = (style) => {\n        applyShim.transformCustomStyle(style);\n      };\n      this.customStyleInterface['validateCallback'] = () => {\n        requestAnimationFrame(() => {\n          if (this.customStyleInterface['enqueued']) {\n            this.flushCustomStyles();\n          }\n        });\n      };\n    }\n  }\n  /**\n   * @param {!HTMLTemplateElement} template\n   * @param {string} elementName\n   */\n  prepareTemplate(template, elementName) {\n    this.ensure();\n    if (elementHasBuiltCss(template)) {\n      return;\n    }\n    templateMap[elementName] = template;\n    let ast = applyShim.transformTemplate(template, elementName);\n    // save original style ast to use for revalidating instances\n    template['_styleAst'] = ast;\n  }\n  flushCustomStyles() {\n    this.ensure();\n    if (!this.customStyleInterface) {\n      return;\n    }\n    let styles = this.customStyleInterface['processStyles']();\n    if (!this.customStyleInterface['enqueued']) {\n      return;\n    }\n    for (let i = 0; i < styles.length; i++) {\n      let cs = styles[i];\n      let style = this.customStyleInterface['getStyleForCustomStyle'](cs);\n      if (style) {\n        applyShim.transformCustomStyle(style);\n      }\n    }\n    this.customStyleInterface['enqueued'] = false;\n  }\n  /**\n   * @param {HTMLElement} element\n   * @param {Object=} properties\n   */\n  styleSubtree(element, properties) {\n    this.ensure();\n    if (properties) {\n      updateNativeProperties(element, properties);\n    }\n    if (element.shadowRoot) {\n      this.styleElement(element);\n      let shadowChildren =\n        /** @type {!ParentNode} */ (element.shadowRoot).children ||\n        element.shadowRoot.childNodes;\n      for (let i = 0; i < shadowChildren.length; i++) {\n        this.styleSubtree(/** @type {HTMLElement} */ (shadowChildren[i]));\n      }\n    } else {\n      let children = element.children || element.childNodes;\n      for (let i = 0; i < children.length; i++) {\n        this.styleSubtree(/** @type {HTMLElement} */ (children[i]));\n      }\n    }\n  }\n  /**\n   * @param {HTMLElement} element\n   */\n  styleElement(element) {\n    this.ensure();\n    let {is} = getIsExtends(element);\n    let template = templateMap[is];\n    if (template && elementHasBuiltCss(template)) {\n      return;\n    }\n    if (template && !ApplyShimUtils.templateIsValid(template)) {\n      // only revalidate template once\n      if (!ApplyShimUtils.templateIsValidating(template)) {\n        this.prepareTemplate(template, is);\n        ApplyShimUtils.startValidatingTemplate(template);\n      }\n      // update this element instance\n      let root = element.shadowRoot;\n      if (root) {\n        let style = /** @type {HTMLStyleElement} */ (root.querySelector(\n          'style'\n        ));\n        if (style) {\n          // reuse the template's style ast, it has all the original css text\n          style['__cssRules'] = template['_styleAst'];\n          style.textContent = toCssText(template['_styleAst']);\n        }\n      }\n    }\n  }\n  /**\n   * @param {Object=} properties\n   */\n  styleDocument(properties) {\n    this.ensure();\n    this.styleSubtree(document.body, properties);\n  }\n}\n\nif (!window.ShadyCSS || !window.ShadyCSS.ScopingShim) {\n  const applyShimInterface = new ApplyShimInterface();\n  let CustomStyleInterface =\n    window.ShadyCSS && window.ShadyCSS.CustomStyleInterface;\n\n  /** @suppress {duplicate} */\n  window.ShadyCSS = {\n    /**\n     * @param {!HTMLTemplateElement} template\n     * @param {string} elementName\n     * @param {string=} elementExtends\n     */\n    // eslint-disable-next-line @typescript-eslint/no-unused-vars\n    prepareTemplate(template, elementName, elementExtends) {\n      applyShimInterface.flushCustomStyles();\n      applyShimInterface.prepareTemplate(template, elementName);\n    },\n\n    /**\n     * @param {!HTMLTemplateElement} template\n     * @param {string} elementName\n     * @param {string=} elementExtends\n     */\n    prepareTemplateStyles(template, elementName, elementExtends) {\n      window.ShadyCSS.prepareTemplate(template, elementName, elementExtends);\n    },\n\n    /**\n     * @param {!HTMLTemplateElement} template\n     * @param {string} elementName\n     */\n    prepareTemplateDom(template, elementName) {}, // eslint-disable-line @typescript-eslint/no-unused-vars\n\n    /**\n     * @param {!HTMLElement} element\n     * @param {Object=} properties\n     */\n    styleSubtree(element, properties) {\n      applyShimInterface.flushCustomStyles();\n      applyShimInterface.styleSubtree(element, properties);\n    },\n\n    /**\n     * @param {!HTMLElement} element\n     */\n    styleElement(element) {\n      applyShimInterface.flushCustomStyles();\n      applyShimInterface.styleElement(element);\n    },\n\n    /**\n     * @param {Object=} properties\n     */\n    styleDocument(properties) {\n      applyShimInterface.flushCustomStyles();\n      applyShimInterface.styleDocument(properties);\n    },\n\n    /**\n     * @param {Element} element\n     * @param {string} property\n     * @return {string}\n     */\n    getComputedStyleValue(element, property) {\n      return getComputedStyleValue(element, property);\n    },\n\n    flushCustomStyles() {\n      applyShimInterface.flushCustomStyles();\n    },\n\n    nativeCss: nativeCssVariables,\n    nativeShadow: nativeShadow,\n    cssBuild: cssBuild,\n    disableRuntime: disableRuntime,\n  };\n\n  if (CustomStyleInterface) {\n    window.ShadyCSS.CustomStyleInterface = CustomStyleInterface;\n  }\n}\n\nwindow.ShadyCSS.ApplyShim = applyShim;\n"]}