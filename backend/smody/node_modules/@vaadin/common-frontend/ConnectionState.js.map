{"version":3,"file":"ConnectionState.js","sourceRoot":"","sources":["src/ConnectionState.ts"],"names":[],"mappings":"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","sourcesContent":["export enum ConnectionState {\n  /**\n   * Application is connected to server: last transaction over the wire (XHR /\n   * heartbeat / endpoint call) was successful.\n   */\n  CONNECTED = 'connected',\n\n  /**\n   * Application is connected and Flow is loading application state from the\n   * server, or Fusion is waiting for an endpoint call to return.\n   */\n  LOADING = 'loading',\n\n  /**\n   * Application has been temporarily disconnected from the server because the\n   * last transaction over the wire (XHR / heartbeat / endpoint call) resulted\n   * in a network error, or the browser has received the 'online' event and needs\n   * to verify reconnection with the server. Flow is attempting to reconnect\n   * a configurable number of times before giving up.\n   */\n  RECONNECTING = 'reconnecting',\n\n  /**\n   * Application has been permanently disconnected due to browser receiving the\n   * 'offline' event, or the server not being reached after a number of reconnect\n   * attempts.\n   */\n  CONNECTION_LOST = 'connection-lost',\n}\n\nexport type ConnectionStateChangeListener = (previous: ConnectionState, current: ConnectionState) => void;\n\nexport class ConnectionStateStore {\n  private connectionState: ConnectionState;\n\n  private stateChangeListeners: Set<ConnectionStateChangeListener> = new Set();\n\n  private loadingCount = 0;\n\n  constructor(initialState: ConnectionState) {\n    this.connectionState = initialState;\n\n    this.serviceWorkerMessageListener = this.serviceWorkerMessageListener.bind(this);\n\n    if (navigator.serviceWorker) {\n      // Query service worker if the most recent fetch was served from cache\n      // Add message listener for handling response\n      navigator.serviceWorker.addEventListener('message', this.serviceWorkerMessageListener);\n      // Send JSON-RPC request to Vaadin service worker\n      navigator.serviceWorker.ready.then((registration) => {\n        registration?.active?.postMessage({\n          method: 'Vaadin.ServiceWorker.isConnectionLost',\n          id: 'Vaadin.ServiceWorker.isConnectionLost',\n        });\n      });\n    }\n  }\n\n  addStateChangeListener(listener: ConnectionStateChangeListener): void {\n    this.stateChangeListeners.add(listener);\n  }\n\n  removeStateChangeListener(listener: ConnectionStateChangeListener): void {\n    this.stateChangeListeners.delete(listener);\n  }\n\n  loadingStarted(): void {\n    this.state = ConnectionState.LOADING;\n    this.loadingCount += 1;\n  }\n\n  loadingFinished(): void {\n    this.decreaseLoadingCount(ConnectionState.CONNECTED);\n  }\n\n  loadingFailed(): void {\n    this.decreaseLoadingCount(ConnectionState.CONNECTION_LOST);\n  }\n\n  private decreaseLoadingCount(finalState: ConnectionState) {\n    if (this.loadingCount > 0) {\n      this.loadingCount -= 1;\n      if (this.loadingCount === 0) {\n        this.state = finalState;\n      }\n    }\n  }\n\n  get state(): ConnectionState {\n    return this.connectionState;\n  }\n\n  set state(newState: ConnectionState) {\n    if (newState !== this.connectionState) {\n      const prevState = this.connectionState;\n      this.connectionState = newState;\n      this.loadingCount = 0;\n      for (const listener of this.stateChangeListeners) {\n        listener(prevState, this.connectionState);\n      }\n    }\n  }\n\n  get online(): boolean {\n    return this.connectionState === ConnectionState.CONNECTED || this.connectionState === ConnectionState.LOADING;\n  }\n\n  get offline(): boolean {\n    return !this.online;\n  }\n\n  private serviceWorkerMessageListener(event: MessageEvent) {\n    // Handle JSON-RPC response from service worker\n    if (typeof event.data === 'object' && event.data.id === 'Vaadin.ServiceWorker.isConnectionLost') {\n      if (event.data.result === true) {\n        this.state = ConnectionState.CONNECTION_LOST;\n      }\n\n      // Cleanup: remove event listener upon receiving response\n      navigator.serviceWorker.removeEventListener('message', this.serviceWorkerMessageListener);\n    }\n  }\n}\n\nconst $wnd = window as any;\nif (!$wnd.Vaadin?.connectionState) {\n  $wnd.Vaadin = $wnd.Vaadin || {};\n  $wnd.Vaadin.connectionState = new ConnectionStateStore(\n    navigator.onLine ? ConnectionState.CONNECTED : ConnectionState.CONNECTION_LOST\n  );\n}\n"]}